package info.jerrinot.jet.cdc.impl;

import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.connect.data.Schema;
import org.apache.kafka.connect.source.SourceRecord;

import java.lang.reflect.Field;

import static io.debezium.config.Field.create;

final class UglyHacks {
    private static final io.debezium.config.Field CONTEXT_JOB_ID = create(Constants.JOB_ID_KEY);

    static void addJobIdFieldIntoEmbeddedConfig() {
        try {
            Class<?> aClass = Class.forName("io.debezium.embedded.EmbeddedEngine$EmbeddedConfig");
            Field configField = aClass.getDeclaredField("CONFIG");
            configField.setAccessible(true);
            ConfigDef configDef = (ConfigDef) configField.get(null);

            if (configDef.names().contains(Constants.JOB_ID_KEY)) {
                return;
            }
            synchronized (UglyHacks.class) { //kill me and my classloader
                if (configDef.names().contains(Constants.JOB_ID_KEY)) {
                    return;
                }
                io.debezium.config.Field.group(configDef, null, CONTEXT_JOB_ID);
            }
        } catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException e) {
            throw new AssertionError("Cannot hack EmbeddedConfig", e);
        }
    }

    /**
     * This is a bunch of hacks based on messages I observed when developing the source.
     * It should not be needed and eventually this whole method will disappears
     * Right now I do not have sufficient understanding of Debezium to do so.
     *
     * @param item
     * @return
     */
    static boolean shouldSkipMessage(Object item) {
        if (!(item instanceof SourceRecord)) {
            // it's probably some Jetezium internal message. let's process it.
            return false;
        }

        // ok, the message generated by Debezium, let's have a closer look
        SourceRecord sourceRecord = (SourceRecord) item;
        Schema keySchema = sourceRecord.keySchema();
        // regular change records have no key. just value.
        // if there no key schema then it's probably a regular
        // change record. let's NOT skip it.
        if (keySchema == null) {
            return false;
        }

        // this is probably a schema change. let's double-check
        String keySchemaName = keySchema.name();
        if ("io.debezium.connector.mysql.SchemaChangeKey".equals(keySchemaName)) {
            // this is a known schema change message. we are ignoring schema changes for now.
            return true;
        } else {
            // but we want to fail-fast for other messages.
            throw new AssertionError("Unknown message: " + item);
        }
    }
}
